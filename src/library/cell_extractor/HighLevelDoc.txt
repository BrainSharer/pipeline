Description by Yoav:

The marked cell detector softwere, which I originally wrote,
consists of the following parts:

CellExtractor: uses an adaptive threshold to extract from images small
regions that are candidates to being marked cells.

FeatureFiner: generates for each candidate a feature vector that
characterizes the shape of the cell candidate.

CellDetectorTrainer: takes as input a labeled set of feature vectors
(the training set) and generates an ensemble of cclassifiers. This is based on the
package XGBoost.

Detector: Consists of an ensamble of classifiers and thresholds to
computer "sure" and "unsure". Takes as input feature vectors and computes for each one the
score for each classifier. Then computes the average and std of the
scores and finally translates those to "sure" and "unsure" 


==========================================
BorderFinder.py:class BorderFinder(CellDetectorBase):


CellDetector.py:class CellDetector(CellDetectorBase):
 ### depracated ###   CellDetector.py:class MultiThresholdDetector(CellDetector,AnnotationProximityTool):

CellDetectorBase.py:class CellDetectorBase(Brain):

CellDetectorManager.py:class CellDetector(CellDetectorBase):

CellDetectorTrainer.py:class DK55DataLoader(CellAnnotationUtilities):
CellDetectorTrainer.py:class CellDetectorTrainer(Detector,CellDetectorBase):
CellDetectorTrainer.py:class CellDetectorTrainerDK55(CellDetectorTrainer,DK55DataLoader):

MeanImageCalculator.py:class MeanImageCalculator(CellDetectorBase):

Predictor.py:class Predictor:
Predictor.py:class BetterPredictor:   
Predictor.py:class GreedyPredictor:   

DetectionPlotter.py:class Plotter:
DetectionPlotter.py:class DetectionPlotter(Plotter):

Detector.py:class Detector():

ExampleFinder.py:class ExampleFinder(CellDetectorBase):

FeatureFinder.py:class FeatureFinder(CellDetectorBase):
FeatureFinder.py:    """class to calculate feature vector for each extracted image pair (CH1, CH3)


### Classes that have to do with human labeling and QC

CellAnnotationUtilities.py:class CellAnnotationUtilities:

InterRatorResults.py:class DK41InterRator:
InterRatorResults.py:class Round3DK41MarissaJulianResult(DK41InterRator):
InterRatorResults.py:class Round4DK41MarissaJulianResult(DK41InterRator):

AnnotationProximityTool.py:class AnnotationProximityTool(CellDetectorBase):
AnnotationProximityTool.py:class AcrossSectionProximity(AnnotationProximityTool):
AnnotationProximityTool.py:class DetectorMetricsDK55(AnnotationProximityTool):


QcGenerater.py:class QcGenerater:
QcGenerater.py:class QcGeneraterDK41(QcGenerater):
